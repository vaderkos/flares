export declare type CamelCaseCodeStatuses = typeof CamelCaseCodeStatuses;
export declare const CamelCaseCodeStatuses: {
    readonly continue100: readonly [100, "Continue"];
    readonly switchingProtocols101: readonly [101, "Switching Protocols"];
    readonly processing102: readonly [102, "Processing"];
    readonly earlyHints103: readonly [103, "Early Hints"];
    readonly ok200: readonly [200, "OK"];
    readonly created201: readonly [201, "Created"];
    readonly accepted202: readonly [202, "Accepted"];
    readonly nonAuthoritativeInformation203: readonly [203, "Non-Authoritative Information"];
    readonly noContent204: readonly [204, "No Content"];
    readonly resetContent205: readonly [205, "Reset Content"];
    readonly partialContent206: readonly [206, "Partial Content"];
    readonly multiStatus207: readonly [207, "Multi-Status"];
    readonly alreadyReported208: readonly [208, "Already Reported"];
    readonly imUsed226: readonly [226, "IM Used"];
    readonly multipleChoices300: readonly [300, "Multiple Choices"];
    readonly movedPermanently301: readonly [301, "Moved Permanently"];
    readonly found302: readonly [302, "Found"];
    readonly seeOther303: readonly [303, "See Other"];
    readonly notModified304: readonly [304, "Not Modified"];
    readonly useProxy305: readonly [305, "Use Proxy"];
    readonly switchProxy306: readonly [306, "Switch Proxy"];
    readonly temporaryRedirect307: readonly [307, "Temporary Redirect"];
    readonly permanentRedirect308: readonly [308, "Permanent Redirect"];
    readonly badRequest400: readonly [400, "Bad Request"];
    readonly unauthorized401: readonly [401, "Unauthorized"];
    readonly paymentRequired402: readonly [402, "Payment Required"];
    readonly forbidden403: readonly [403, "Forbidden"];
    readonly notFound404: readonly [404, "Not Found"];
    readonly methodNotAllowed405: readonly [405, "Method Not Allowed"];
    readonly notAcceptable406: readonly [406, "Not Acceptable"];
    readonly proxyAuthenticationRequired407: readonly [407, "Proxy Authentication Required"];
    readonly requestTimeout408: readonly [408, "Request Timeout"];
    readonly conflict409: readonly [409, "Conflict"];
    readonly gone410: readonly [410, "Gone"];
    readonly lengthRequired411: readonly [411, "Length Required"];
    readonly preconditionFailed412: readonly [412, "Precondition Failed"];
    readonly payloadTooLarge413: readonly [413, "Payload Too Large"];
    readonly uriTooLong414: readonly [414, "URI Too Long"];
    readonly unsupportedMediaType415: readonly [415, "Unsupported Media Type"];
    readonly rangeNotSatisfiable416: readonly [416, "Range Not Satisfiable"];
    readonly expectationFailed417: readonly [417, "Expectation Failed"];
    readonly imATeapot418: readonly [418, "I'm a teapot"];
    readonly misdirectedRequest421: readonly [421, "Misdirected Request"];
    readonly unprocessableEntity422: readonly [422, "Unprocessable Entity"];
    readonly locked423: readonly [423, "Locked"];
    readonly failedDependency424: readonly [424, "Failed Dependency"];
    readonly tooEarly425: readonly [425, "Too Early"];
    readonly upgradeRequired426: readonly [426, "Upgrade Required"];
    readonly preconditionRequired428: readonly [428, "Precondition Required"];
    readonly tooManyRequests429: readonly [429, "Too Many Requests"];
    readonly requestHeaderFieldsTooLarge431: readonly [431, "Request Header Fields Too Large"];
    readonly unavailableForLegalReasons451: readonly [451, "Unavailable For Legal Reasons"];
    readonly internalServerError500: readonly [500, "Internal Server Error"];
    readonly notImplemented501: readonly [501, "Not Implemented"];
    readonly badGateway502: readonly [502, "Bad Gateway"];
    readonly serviceUnavailable503: readonly [503, "Service Unavailable"];
    readonly gatewayTimeout504: readonly [504, "Gateway Timeout"];
    readonly httpVersionNotSupported505: readonly [505, "HTTP Version Not Supported"];
    readonly variantAlsoNegotiates506: readonly [506, "Variant Also Negotiates"];
    readonly insufficientStorage507: readonly [507, "Insufficient Storage"];
    readonly loopDetected508: readonly [508, "Loop Detected"];
    readonly notExtended510: readonly [510, "Not Extended"];
    readonly networkAuthenticationRequired511: readonly [511, "Network Authentication Required"];
    readonly used226: readonly [226, "IM Used"];
    readonly teapot418: readonly [418, "I'm a teapot"];
    readonly internal500: readonly [500, "Internal Server Error"];
};
