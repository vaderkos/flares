import { Flares } from '@flares/core';
declare const PascalCaseFlares: Flares<{
    readonly Continue: readonly [100, "Continue"];
    readonly SwitchingProtocols: readonly [101, "Switching Protocols"];
    readonly Processing: readonly [102, "Processing"];
    readonly EarlyHints: readonly [103, "Early Hints"];
    readonly Ok: readonly [200, "OK"];
    readonly Created: readonly [201, "Created"];
    readonly Accepted: readonly [202, "Accepted"];
    readonly NonAuthoritativeInformation: readonly [203, "Non-Authoritative Information"];
    readonly NoContent: readonly [204, "No Content"];
    readonly ResetContent: readonly [205, "Reset Content"];
    readonly PartialContent: readonly [206, "Partial Content"];
    readonly MultiStatus: readonly [207, "Multi-Status"];
    readonly AlreadyReported: readonly [208, "Already Reported"];
    readonly ImUsed: readonly [226, "IM Used"];
    readonly MultipleChoices: readonly [300, "Multiple Choices"];
    readonly MovedPermanently: readonly [301, "Moved Permanently"];
    readonly Found: readonly [302, "Found"];
    readonly SeeOther: readonly [303, "See Other"];
    readonly NotModified: readonly [304, "Not Modified"];
    readonly UseProxy: readonly [305, "Use Proxy"];
    readonly SwitchProxy: readonly [306, "Switch Proxy"];
    readonly TemporaryRedirect: readonly [307, "Temporary Redirect"];
    readonly PermanentRedirect: readonly [308, "Permanent Redirect"];
    readonly BadRequest: readonly [400, "Bad Request"];
    readonly Unauthorized: readonly [401, "Unauthorized"];
    readonly PaymentRequired: readonly [402, "Payment Required"];
    readonly Forbidden: readonly [403, "Forbidden"];
    readonly NotFound: readonly [404, "Not Found"];
    readonly MethodNotAllowed: readonly [405, "Method Not Allowed"];
    readonly NotAcceptable: readonly [406, "Not Acceptable"];
    readonly ProxyAuthenticationRequired: readonly [407, "Proxy Authentication Required"];
    readonly RequestTimeout: readonly [408, "Request Timeout"];
    readonly Conflict: readonly [409, "Conflict"];
    readonly Gone: readonly [410, "Gone"];
    readonly LengthRequired: readonly [411, "Length Required"];
    readonly PreconditionFailed: readonly [412, "Precondition Failed"];
    readonly PayloadTooLarge: readonly [413, "Payload Too Large"];
    readonly UriTooLong: readonly [414, "URI Too Long"];
    readonly UnsupportedMediaType: readonly [415, "Unsupported Media Type"];
    readonly RangeNotSatisfiable: readonly [416, "Range Not Satisfiable"];
    readonly ExpectationFailed: readonly [417, "Expectation Failed"];
    readonly ImATeapot: readonly [418, "I'm a teapot"];
    readonly MisdirectedRequest: readonly [421, "Misdirected Request"];
    readonly UnprocessableEntity: readonly [422, "Unprocessable Entity"];
    readonly Locked: readonly [423, "Locked"];
    readonly FailedDependency: readonly [424, "Failed Dependency"];
    readonly TooEarly: readonly [425, "Too Early"];
    readonly UpgradeRequired: readonly [426, "Upgrade Required"];
    readonly PreconditionRequired: readonly [428, "Precondition Required"];
    readonly TooManyRequests: readonly [429, "Too Many Requests"];
    readonly RequestHeaderFieldsTooLarge: readonly [431, "Request Header Fields Too Large"];
    readonly UnavailableForLegalReasons: readonly [451, "Unavailable For Legal Reasons"];
    readonly InternalServerError: readonly [500, "Internal Server Error"];
    readonly NotImplemented: readonly [501, "Not Implemented"];
    readonly BadGateway: readonly [502, "Bad Gateway"];
    readonly ServiceUnavailable: readonly [503, "Service Unavailable"];
    readonly GatewayTimeout: readonly [504, "Gateway Timeout"];
    readonly HttpVersionNotSupported: readonly [505, "HTTP Version Not Supported"];
    readonly VariantAlsoNegotiates: readonly [506, "Variant Also Negotiates"];
    readonly InsufficientStorage: readonly [507, "Insufficient Storage"];
    readonly LoopDetected: readonly [508, "Loop Detected"];
    readonly NotExtended: readonly [510, "Not Extended"];
    readonly NetworkAuthenticationRequired: readonly [511, "Network Authentication Required"];
    readonly Used: readonly [226, "IM Used"];
    readonly Teapot: readonly [418, "I'm a teapot"];
    readonly Internal: readonly [500, "Internal Server Error"];
}>;
declare type PascalCaseFlares = typeof PascalCaseFlares;
export { PascalCaseFlares, PascalCaseFlares as Fls };
export declare const Continue: import("@flares/core/dist").ScopedFlare<100, "Continue">, SwitchingProtocols: import("@flares/core/dist").ScopedFlare<101, "Switching Protocols">, Processing: import("@flares/core/dist").ScopedFlare<102, "Processing">, EarlyHints: import("@flares/core/dist").ScopedFlare<103, "Early Hints">, Ok: import("@flares/core/dist").ScopedFlare<200, "OK">, Created: import("@flares/core/dist").ScopedFlare<201, "Created">, Accepted: import("@flares/core/dist").ScopedFlare<202, "Accepted">, NonAuthoritativeInformation: import("@flares/core/dist").ScopedFlare<203, "Non-Authoritative Information">, NoContent: import("@flares/core/dist").ScopedFlare<204, "No Content">, ResetContent: import("@flares/core/dist").ScopedFlare<205, "Reset Content">, PartialContent: import("@flares/core/dist").ScopedFlare<206, "Partial Content">, MultiStatus: import("@flares/core/dist").ScopedFlare<207, "Multi-Status">, AlreadyReported: import("@flares/core/dist").ScopedFlare<208, "Already Reported">, ImUsed: import("@flares/core/dist").ScopedFlare<226, "IM Used">, MultipleChoices: import("@flares/core/dist").ScopedFlare<300, "Multiple Choices">, MovedPermanently: import("@flares/core/dist").ScopedFlare<301, "Moved Permanently">, Found: import("@flares/core/dist").ScopedFlare<302, "Found">, SeeOther: import("@flares/core/dist").ScopedFlare<303, "See Other">, NotModified: import("@flares/core/dist").ScopedFlare<304, "Not Modified">, UseProxy: import("@flares/core/dist").ScopedFlare<305, "Use Proxy">, SwitchProxy: import("@flares/core/dist").ScopedFlare<306, "Switch Proxy">, TemporaryRedirect: import("@flares/core/dist").ScopedFlare<307, "Temporary Redirect">, PermanentRedirect: import("@flares/core/dist").ScopedFlare<308, "Permanent Redirect">, BadRequest: import("@flares/core/dist").ScopedFlare<400, "Bad Request">, Unauthorized: import("@flares/core/dist").ScopedFlare<401, "Unauthorized">, PaymentRequired: import("@flares/core/dist").ScopedFlare<402, "Payment Required">, Forbidden: import("@flares/core/dist").ScopedFlare<403, "Forbidden">, NotFound: import("@flares/core/dist").ScopedFlare<404, "Not Found">, MethodNotAllowed: import("@flares/core/dist").ScopedFlare<405, "Method Not Allowed">, NotAcceptable: import("@flares/core/dist").ScopedFlare<406, "Not Acceptable">, ProxyAuthenticationRequired: import("@flares/core/dist").ScopedFlare<407, "Proxy Authentication Required">, RequestTimeout: import("@flares/core/dist").ScopedFlare<408, "Request Timeout">, Conflict: import("@flares/core/dist").ScopedFlare<409, "Conflict">, Gone: import("@flares/core/dist").ScopedFlare<410, "Gone">, LengthRequired: import("@flares/core/dist").ScopedFlare<411, "Length Required">, PreconditionFailed: import("@flares/core/dist").ScopedFlare<412, "Precondition Failed">, PayloadTooLarge: import("@flares/core/dist").ScopedFlare<413, "Payload Too Large">, UriTooLong: import("@flares/core/dist").ScopedFlare<414, "URI Too Long">, UnsupportedMediaType: import("@flares/core/dist").ScopedFlare<415, "Unsupported Media Type">, RangeNotSatisfiable: import("@flares/core/dist").ScopedFlare<416, "Range Not Satisfiable">, ExpectationFailed: import("@flares/core/dist").ScopedFlare<417, "Expectation Failed">, ImATeapot: import("@flares/core/dist").ScopedFlare<418, "I'm a teapot">, MisdirectedRequest: import("@flares/core/dist").ScopedFlare<421, "Misdirected Request">, UnprocessableEntity: import("@flares/core/dist").ScopedFlare<422, "Unprocessable Entity">, Locked: import("@flares/core/dist").ScopedFlare<423, "Locked">, FailedDependency: import("@flares/core/dist").ScopedFlare<424, "Failed Dependency">, TooEarly: import("@flares/core/dist").ScopedFlare<425, "Too Early">, UpgradeRequired: import("@flares/core/dist").ScopedFlare<426, "Upgrade Required">, PreconditionRequired: import("@flares/core/dist").ScopedFlare<428, "Precondition Required">, TooManyRequests: import("@flares/core/dist").ScopedFlare<429, "Too Many Requests">, RequestHeaderFieldsTooLarge: import("@flares/core/dist").ScopedFlare<431, "Request Header Fields Too Large">, UnavailableForLegalReasons: import("@flares/core/dist").ScopedFlare<451, "Unavailable For Legal Reasons">, InternalServerError: import("@flares/core/dist").ScopedFlare<500, "Internal Server Error">, NotImplemented: import("@flares/core/dist").ScopedFlare<501, "Not Implemented">, BadGateway: import("@flares/core/dist").ScopedFlare<502, "Bad Gateway">, ServiceUnavailable: import("@flares/core/dist").ScopedFlare<503, "Service Unavailable">, GatewayTimeout: import("@flares/core/dist").ScopedFlare<504, "Gateway Timeout">, HttpVersionNotSupported: import("@flares/core/dist").ScopedFlare<505, "HTTP Version Not Supported">, VariantAlsoNegotiates: import("@flares/core/dist").ScopedFlare<506, "Variant Also Negotiates">, InsufficientStorage: import("@flares/core/dist").ScopedFlare<507, "Insufficient Storage">, LoopDetected: import("@flares/core/dist").ScopedFlare<508, "Loop Detected">, NotExtended: import("@flares/core/dist").ScopedFlare<510, "Not Extended">, NetworkAuthenticationRequired: import("@flares/core/dist").ScopedFlare<511, "Network Authentication Required">, Used: import("@flares/core/dist").ScopedFlare<226, "IM Used">, Teapot: import("@flares/core/dist").ScopedFlare<418, "I'm a teapot">, Internal: import("@flares/core/dist").ScopedFlare<500, "Internal Server Error">;
