import { Flares } from '@flares/core';
declare const PascalCaseCodeFlares: Flares<{
    readonly Continue100: readonly [100, "Continue"];
    readonly SwitchingProtocols101: readonly [101, "Switching Protocols"];
    readonly Processing102: readonly [102, "Processing"];
    readonly EarlyHints103: readonly [103, "Early Hints"];
    readonly Ok200: readonly [200, "OK"];
    readonly Created201: readonly [201, "Created"];
    readonly Accepted202: readonly [202, "Accepted"];
    readonly NonAuthoritativeInformation203: readonly [203, "Non-Authoritative Information"];
    readonly NoContent204: readonly [204, "No Content"];
    readonly ResetContent205: readonly [205, "Reset Content"];
    readonly PartialContent206: readonly [206, "Partial Content"];
    readonly MultiStatus207: readonly [207, "Multi-Status"];
    readonly AlreadyReported208: readonly [208, "Already Reported"];
    readonly ImUsed226: readonly [226, "IM Used"];
    readonly MultipleChoices300: readonly [300, "Multiple Choices"];
    readonly MovedPermanently301: readonly [301, "Moved Permanently"];
    readonly Found302: readonly [302, "Found"];
    readonly SeeOther303: readonly [303, "See Other"];
    readonly NotModified304: readonly [304, "Not Modified"];
    readonly UseProxy305: readonly [305, "Use Proxy"];
    readonly SwitchProxy306: readonly [306, "Switch Proxy"];
    readonly TemporaryRedirect307: readonly [307, "Temporary Redirect"];
    readonly PermanentRedirect308: readonly [308, "Permanent Redirect"];
    readonly BadRequest400: readonly [400, "Bad Request"];
    readonly Unauthorized401: readonly [401, "Unauthorized"];
    readonly PaymentRequired402: readonly [402, "Payment Required"];
    readonly Forbidden403: readonly [403, "Forbidden"];
    readonly NotFound404: readonly [404, "Not Found"];
    readonly MethodNotAllowed405: readonly [405, "Method Not Allowed"];
    readonly NotAcceptable406: readonly [406, "Not Acceptable"];
    readonly ProxyAuthenticationRequired407: readonly [407, "Proxy Authentication Required"];
    readonly RequestTimeout408: readonly [408, "Request Timeout"];
    readonly Conflict409: readonly [409, "Conflict"];
    readonly Gone410: readonly [410, "Gone"];
    readonly LengthRequired411: readonly [411, "Length Required"];
    readonly PreconditionFailed412: readonly [412, "Precondition Failed"];
    readonly PayloadTooLarge413: readonly [413, "Payload Too Large"];
    readonly UriTooLong414: readonly [414, "URI Too Long"];
    readonly UnsupportedMediaType415: readonly [415, "Unsupported Media Type"];
    readonly RangeNotSatisfiable416: readonly [416, "Range Not Satisfiable"];
    readonly ExpectationFailed417: readonly [417, "Expectation Failed"];
    readonly ImATeapot418: readonly [418, "I'm a teapot"];
    readonly MisdirectedRequest421: readonly [421, "Misdirected Request"];
    readonly UnprocessableEntity422: readonly [422, "Unprocessable Entity"];
    readonly Locked423: readonly [423, "Locked"];
    readonly FailedDependency424: readonly [424, "Failed Dependency"];
    readonly TooEarly425: readonly [425, "Too Early"];
    readonly UpgradeRequired426: readonly [426, "Upgrade Required"];
    readonly PreconditionRequired428: readonly [428, "Precondition Required"];
    readonly TooManyRequests429: readonly [429, "Too Many Requests"];
    readonly RequestHeaderFieldsTooLarge431: readonly [431, "Request Header Fields Too Large"];
    readonly UnavailableForLegalReasons451: readonly [451, "Unavailable For Legal Reasons"];
    readonly InternalServerError500: readonly [500, "Internal Server Error"];
    readonly NotImplemented501: readonly [501, "Not Implemented"];
    readonly BadGateway502: readonly [502, "Bad Gateway"];
    readonly ServiceUnavailable503: readonly [503, "Service Unavailable"];
    readonly GatewayTimeout504: readonly [504, "Gateway Timeout"];
    readonly HttpVersionNotSupported505: readonly [505, "HTTP Version Not Supported"];
    readonly VariantAlsoNegotiates506: readonly [506, "Variant Also Negotiates"];
    readonly InsufficientStorage507: readonly [507, "Insufficient Storage"];
    readonly LoopDetected508: readonly [508, "Loop Detected"];
    readonly NotExtended510: readonly [510, "Not Extended"];
    readonly NetworkAuthenticationRequired511: readonly [511, "Network Authentication Required"];
    readonly Used226: readonly [226, "IM Used"];
    readonly Teapot418: readonly [418, "I'm a teapot"];
    readonly Internal500: readonly [500, "Internal Server Error"];
}>;
declare type PascalCaseCodeFlares = typeof PascalCaseCodeFlares;
export { PascalCaseCodeFlares, PascalCaseCodeFlares as Fls };
export declare const Continue100: import("@flares/core/dist").ScopedFlare<100, "Continue">, SwitchingProtocols101: import("@flares/core/dist").ScopedFlare<101, "Switching Protocols">, Processing102: import("@flares/core/dist").ScopedFlare<102, "Processing">, EarlyHints103: import("@flares/core/dist").ScopedFlare<103, "Early Hints">, Ok200: import("@flares/core/dist").ScopedFlare<200, "OK">, Created201: import("@flares/core/dist").ScopedFlare<201, "Created">, Accepted202: import("@flares/core/dist").ScopedFlare<202, "Accepted">, NonAuthoritativeInformation203: import("@flares/core/dist").ScopedFlare<203, "Non-Authoritative Information">, NoContent204: import("@flares/core/dist").ScopedFlare<204, "No Content">, ResetContent205: import("@flares/core/dist").ScopedFlare<205, "Reset Content">, PartialContent206: import("@flares/core/dist").ScopedFlare<206, "Partial Content">, MultiStatus207: import("@flares/core/dist").ScopedFlare<207, "Multi-Status">, AlreadyReported208: import("@flares/core/dist").ScopedFlare<208, "Already Reported">, ImUsed226: import("@flares/core/dist").ScopedFlare<226, "IM Used">, MultipleChoices300: import("@flares/core/dist").ScopedFlare<300, "Multiple Choices">, MovedPermanently301: import("@flares/core/dist").ScopedFlare<301, "Moved Permanently">, Found302: import("@flares/core/dist").ScopedFlare<302, "Found">, SeeOther303: import("@flares/core/dist").ScopedFlare<303, "See Other">, NotModified304: import("@flares/core/dist").ScopedFlare<304, "Not Modified">, UseProxy305: import("@flares/core/dist").ScopedFlare<305, "Use Proxy">, SwitchProxy306: import("@flares/core/dist").ScopedFlare<306, "Switch Proxy">, TemporaryRedirect307: import("@flares/core/dist").ScopedFlare<307, "Temporary Redirect">, PermanentRedirect308: import("@flares/core/dist").ScopedFlare<308, "Permanent Redirect">, BadRequest400: import("@flares/core/dist").ScopedFlare<400, "Bad Request">, Unauthorized401: import("@flares/core/dist").ScopedFlare<401, "Unauthorized">, PaymentRequired402: import("@flares/core/dist").ScopedFlare<402, "Payment Required">, Forbidden403: import("@flares/core/dist").ScopedFlare<403, "Forbidden">, NotFound404: import("@flares/core/dist").ScopedFlare<404, "Not Found">, MethodNotAllowed405: import("@flares/core/dist").ScopedFlare<405, "Method Not Allowed">, NotAcceptable406: import("@flares/core/dist").ScopedFlare<406, "Not Acceptable">, ProxyAuthenticationRequired407: import("@flares/core/dist").ScopedFlare<407, "Proxy Authentication Required">, RequestTimeout408: import("@flares/core/dist").ScopedFlare<408, "Request Timeout">, Conflict409: import("@flares/core/dist").ScopedFlare<409, "Conflict">, Gone410: import("@flares/core/dist").ScopedFlare<410, "Gone">, LengthRequired411: import("@flares/core/dist").ScopedFlare<411, "Length Required">, PreconditionFailed412: import("@flares/core/dist").ScopedFlare<412, "Precondition Failed">, PayloadTooLarge413: import("@flares/core/dist").ScopedFlare<413, "Payload Too Large">, UriTooLong414: import("@flares/core/dist").ScopedFlare<414, "URI Too Long">, UnsupportedMediaType415: import("@flares/core/dist").ScopedFlare<415, "Unsupported Media Type">, RangeNotSatisfiable416: import("@flares/core/dist").ScopedFlare<416, "Range Not Satisfiable">, ExpectationFailed417: import("@flares/core/dist").ScopedFlare<417, "Expectation Failed">, ImATeapot418: import("@flares/core/dist").ScopedFlare<418, "I'm a teapot">, MisdirectedRequest421: import("@flares/core/dist").ScopedFlare<421, "Misdirected Request">, UnprocessableEntity422: import("@flares/core/dist").ScopedFlare<422, "Unprocessable Entity">, Locked423: import("@flares/core/dist").ScopedFlare<423, "Locked">, FailedDependency424: import("@flares/core/dist").ScopedFlare<424, "Failed Dependency">, TooEarly425: import("@flares/core/dist").ScopedFlare<425, "Too Early">, UpgradeRequired426: import("@flares/core/dist").ScopedFlare<426, "Upgrade Required">, PreconditionRequired428: import("@flares/core/dist").ScopedFlare<428, "Precondition Required">, TooManyRequests429: import("@flares/core/dist").ScopedFlare<429, "Too Many Requests">, RequestHeaderFieldsTooLarge431: import("@flares/core/dist").ScopedFlare<431, "Request Header Fields Too Large">, UnavailableForLegalReasons451: import("@flares/core/dist").ScopedFlare<451, "Unavailable For Legal Reasons">, InternalServerError500: import("@flares/core/dist").ScopedFlare<500, "Internal Server Error">, NotImplemented501: import("@flares/core/dist").ScopedFlare<501, "Not Implemented">, BadGateway502: import("@flares/core/dist").ScopedFlare<502, "Bad Gateway">, ServiceUnavailable503: import("@flares/core/dist").ScopedFlare<503, "Service Unavailable">, GatewayTimeout504: import("@flares/core/dist").ScopedFlare<504, "Gateway Timeout">, HttpVersionNotSupported505: import("@flares/core/dist").ScopedFlare<505, "HTTP Version Not Supported">, VariantAlsoNegotiates506: import("@flares/core/dist").ScopedFlare<506, "Variant Also Negotiates">, InsufficientStorage507: import("@flares/core/dist").ScopedFlare<507, "Insufficient Storage">, LoopDetected508: import("@flares/core/dist").ScopedFlare<508, "Loop Detected">, NotExtended510: import("@flares/core/dist").ScopedFlare<510, "Not Extended">, NetworkAuthenticationRequired511: import("@flares/core/dist").ScopedFlare<511, "Network Authentication Required">, Used226: import("@flares/core/dist").ScopedFlare<226, "IM Used">, Teapot418: import("@flares/core/dist").ScopedFlare<418, "I'm a teapot">, Internal500: import("@flares/core/dist").ScopedFlare<500, "Internal Server Error">;
