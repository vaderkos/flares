import { Flares } from '@flares/core';
declare const CamelCaseCodeFlares: Flares<{
    readonly continue100: readonly [100, "Continue"];
    readonly switchingProtocols101: readonly [101, "Switching Protocols"];
    readonly processing102: readonly [102, "Processing"];
    readonly earlyHints103: readonly [103, "Early Hints"];
    readonly ok200: readonly [200, "OK"];
    readonly created201: readonly [201, "Created"];
    readonly accepted202: readonly [202, "Accepted"];
    readonly nonAuthoritativeInformation203: readonly [203, "Non-Authoritative Information"];
    readonly noContent204: readonly [204, "No Content"];
    readonly resetContent205: readonly [205, "Reset Content"];
    readonly partialContent206: readonly [206, "Partial Content"];
    readonly multiStatus207: readonly [207, "Multi-Status"];
    readonly alreadyReported208: readonly [208, "Already Reported"];
    readonly imUsed226: readonly [226, "IM Used"];
    readonly multipleChoices300: readonly [300, "Multiple Choices"];
    readonly movedPermanently301: readonly [301, "Moved Permanently"];
    readonly found302: readonly [302, "Found"];
    readonly seeOther303: readonly [303, "See Other"];
    readonly notModified304: readonly [304, "Not Modified"];
    readonly useProxy305: readonly [305, "Use Proxy"];
    readonly switchProxy306: readonly [306, "Switch Proxy"];
    readonly temporaryRedirect307: readonly [307, "Temporary Redirect"];
    readonly permanentRedirect308: readonly [308, "Permanent Redirect"];
    readonly badRequest400: readonly [400, "Bad Request"];
    readonly unauthorized401: readonly [401, "Unauthorized"];
    readonly paymentRequired402: readonly [402, "Payment Required"];
    readonly forbidden403: readonly [403, "Forbidden"];
    readonly notFound404: readonly [404, "Not Found"];
    readonly methodNotAllowed405: readonly [405, "Method Not Allowed"];
    readonly notAcceptable406: readonly [406, "Not Acceptable"];
    readonly proxyAuthenticationRequired407: readonly [407, "Proxy Authentication Required"];
    readonly requestTimeout408: readonly [408, "Request Timeout"];
    readonly conflict409: readonly [409, "Conflict"];
    readonly gone410: readonly [410, "Gone"];
    readonly lengthRequired411: readonly [411, "Length Required"];
    readonly preconditionFailed412: readonly [412, "Precondition Failed"];
    readonly payloadTooLarge413: readonly [413, "Payload Too Large"];
    readonly uriTooLong414: readonly [414, "URI Too Long"];
    readonly unsupportedMediaType415: readonly [415, "Unsupported Media Type"];
    readonly rangeNotSatisfiable416: readonly [416, "Range Not Satisfiable"];
    readonly expectationFailed417: readonly [417, "Expectation Failed"];
    readonly imATeapot418: readonly [418, "I'm a teapot"];
    readonly misdirectedRequest421: readonly [421, "Misdirected Request"];
    readonly unprocessableEntity422: readonly [422, "Unprocessable Entity"];
    readonly locked423: readonly [423, "Locked"];
    readonly failedDependency424: readonly [424, "Failed Dependency"];
    readonly tooEarly425: readonly [425, "Too Early"];
    readonly upgradeRequired426: readonly [426, "Upgrade Required"];
    readonly preconditionRequired428: readonly [428, "Precondition Required"];
    readonly tooManyRequests429: readonly [429, "Too Many Requests"];
    readonly requestHeaderFieldsTooLarge431: readonly [431, "Request Header Fields Too Large"];
    readonly unavailableForLegalReasons451: readonly [451, "Unavailable For Legal Reasons"];
    readonly internalServerError500: readonly [500, "Internal Server Error"];
    readonly notImplemented501: readonly [501, "Not Implemented"];
    readonly badGateway502: readonly [502, "Bad Gateway"];
    readonly serviceUnavailable503: readonly [503, "Service Unavailable"];
    readonly gatewayTimeout504: readonly [504, "Gateway Timeout"];
    readonly httpVersionNotSupported505: readonly [505, "HTTP Version Not Supported"];
    readonly variantAlsoNegotiates506: readonly [506, "Variant Also Negotiates"];
    readonly insufficientStorage507: readonly [507, "Insufficient Storage"];
    readonly loopDetected508: readonly [508, "Loop Detected"];
    readonly notExtended510: readonly [510, "Not Extended"];
    readonly networkAuthenticationRequired511: readonly [511, "Network Authentication Required"];
    readonly used226: readonly [226, "IM Used"];
    readonly teapot418: readonly [418, "I'm a teapot"];
    readonly internal500: readonly [500, "Internal Server Error"];
}>;
declare type CamelCaseCodeFlares = typeof CamelCaseCodeFlares;
export { CamelCaseCodeFlares, CamelCaseCodeFlares as Fls };
export declare const continue100: import("@flares/core/dist").ScopedFlare<100, "Continue">, switchingProtocols101: import("@flares/core/dist").ScopedFlare<101, "Switching Protocols">, processing102: import("@flares/core/dist").ScopedFlare<102, "Processing">, earlyHints103: import("@flares/core/dist").ScopedFlare<103, "Early Hints">, ok200: import("@flares/core/dist").ScopedFlare<200, "OK">, created201: import("@flares/core/dist").ScopedFlare<201, "Created">, accepted202: import("@flares/core/dist").ScopedFlare<202, "Accepted">, nonAuthoritativeInformation203: import("@flares/core/dist").ScopedFlare<203, "Non-Authoritative Information">, noContent204: import("@flares/core/dist").ScopedFlare<204, "No Content">, resetContent205: import("@flares/core/dist").ScopedFlare<205, "Reset Content">, partialContent206: import("@flares/core/dist").ScopedFlare<206, "Partial Content">, multiStatus207: import("@flares/core/dist").ScopedFlare<207, "Multi-Status">, alreadyReported208: import("@flares/core/dist").ScopedFlare<208, "Already Reported">, imUsed226: import("@flares/core/dist").ScopedFlare<226, "IM Used">, multipleChoices300: import("@flares/core/dist").ScopedFlare<300, "Multiple Choices">, movedPermanently301: import("@flares/core/dist").ScopedFlare<301, "Moved Permanently">, found302: import("@flares/core/dist").ScopedFlare<302, "Found">, seeOther303: import("@flares/core/dist").ScopedFlare<303, "See Other">, notModified304: import("@flares/core/dist").ScopedFlare<304, "Not Modified">, useProxy305: import("@flares/core/dist").ScopedFlare<305, "Use Proxy">, switchProxy306: import("@flares/core/dist").ScopedFlare<306, "Switch Proxy">, temporaryRedirect307: import("@flares/core/dist").ScopedFlare<307, "Temporary Redirect">, permanentRedirect308: import("@flares/core/dist").ScopedFlare<308, "Permanent Redirect">, badRequest400: import("@flares/core/dist").ScopedFlare<400, "Bad Request">, unauthorized401: import("@flares/core/dist").ScopedFlare<401, "Unauthorized">, paymentRequired402: import("@flares/core/dist").ScopedFlare<402, "Payment Required">, forbidden403: import("@flares/core/dist").ScopedFlare<403, "Forbidden">, notFound404: import("@flares/core/dist").ScopedFlare<404, "Not Found">, methodNotAllowed405: import("@flares/core/dist").ScopedFlare<405, "Method Not Allowed">, notAcceptable406: import("@flares/core/dist").ScopedFlare<406, "Not Acceptable">, proxyAuthenticationRequired407: import("@flares/core/dist").ScopedFlare<407, "Proxy Authentication Required">, requestTimeout408: import("@flares/core/dist").ScopedFlare<408, "Request Timeout">, conflict409: import("@flares/core/dist").ScopedFlare<409, "Conflict">, gone410: import("@flares/core/dist").ScopedFlare<410, "Gone">, lengthRequired411: import("@flares/core/dist").ScopedFlare<411, "Length Required">, preconditionFailed412: import("@flares/core/dist").ScopedFlare<412, "Precondition Failed">, payloadTooLarge413: import("@flares/core/dist").ScopedFlare<413, "Payload Too Large">, uriTooLong414: import("@flares/core/dist").ScopedFlare<414, "URI Too Long">, unsupportedMediaType415: import("@flares/core/dist").ScopedFlare<415, "Unsupported Media Type">, rangeNotSatisfiable416: import("@flares/core/dist").ScopedFlare<416, "Range Not Satisfiable">, expectationFailed417: import("@flares/core/dist").ScopedFlare<417, "Expectation Failed">, imATeapot418: import("@flares/core/dist").ScopedFlare<418, "I'm a teapot">, misdirectedRequest421: import("@flares/core/dist").ScopedFlare<421, "Misdirected Request">, unprocessableEntity422: import("@flares/core/dist").ScopedFlare<422, "Unprocessable Entity">, locked423: import("@flares/core/dist").ScopedFlare<423, "Locked">, failedDependency424: import("@flares/core/dist").ScopedFlare<424, "Failed Dependency">, tooEarly425: import("@flares/core/dist").ScopedFlare<425, "Too Early">, upgradeRequired426: import("@flares/core/dist").ScopedFlare<426, "Upgrade Required">, preconditionRequired428: import("@flares/core/dist").ScopedFlare<428, "Precondition Required">, tooManyRequests429: import("@flares/core/dist").ScopedFlare<429, "Too Many Requests">, requestHeaderFieldsTooLarge431: import("@flares/core/dist").ScopedFlare<431, "Request Header Fields Too Large">, unavailableForLegalReasons451: import("@flares/core/dist").ScopedFlare<451, "Unavailable For Legal Reasons">, internalServerError500: import("@flares/core/dist").ScopedFlare<500, "Internal Server Error">, notImplemented501: import("@flares/core/dist").ScopedFlare<501, "Not Implemented">, badGateway502: import("@flares/core/dist").ScopedFlare<502, "Bad Gateway">, serviceUnavailable503: import("@flares/core/dist").ScopedFlare<503, "Service Unavailable">, gatewayTimeout504: import("@flares/core/dist").ScopedFlare<504, "Gateway Timeout">, httpVersionNotSupported505: import("@flares/core/dist").ScopedFlare<505, "HTTP Version Not Supported">, variantAlsoNegotiates506: import("@flares/core/dist").ScopedFlare<506, "Variant Also Negotiates">, insufficientStorage507: import("@flares/core/dist").ScopedFlare<507, "Insufficient Storage">, loopDetected508: import("@flares/core/dist").ScopedFlare<508, "Loop Detected">, notExtended510: import("@flares/core/dist").ScopedFlare<510, "Not Extended">, networkAuthenticationRequired511: import("@flares/core/dist").ScopedFlare<511, "Network Authentication Required">, used226: import("@flares/core/dist").ScopedFlare<226, "IM Used">, teapot418: import("@flares/core/dist").ScopedFlare<418, "I'm a teapot">, internal500: import("@flares/core/dist").ScopedFlare<500, "Internal Server Error">;
